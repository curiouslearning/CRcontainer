default_platform(:android)

platform :android do
  desc "Build and deploy the app if commit message contains 'release', else build debug APK and upload to GitHub"

  lane :deploy do
    last_commit = sh("git log -1 --pretty=%B").strip

    if last_commit.downcase.include?("release")
      UI.message("Release commit detected. Building AAB and uploading to Play Store...")

      # Optional version bump
      # increment_version_code(
      #   gradle_file_path: "../app/build.gradle"
      # )

      # version_name = Time.now.strftime("%Y.%m.%d.%H%M")
      # increment_version_name(
      #   version_name: version_name,
      #   gradle_file_path: "../app/build.gradle"
      # )

      gradle(
        task: "bundle",
        build_type: "Release",
        project_dir: "../"
      )

      changelog = sh("git log -5 --pretty=format:'- %s'").strip

      # Uncomment to enable actual Play Store upload
      # upload_to_play_store(
      #   track: "internal",
      #   skip_upload_metadata: true,
      #   skip_upload_images: true,
      #   skip_upload_screenshots: true,
      #   json_key: "fastlane/service-account.json"
      # )

      slack(
        message: ":rocket: *Test App successfully deployed to Play Store (Internal Track)*\n\n*Changelog:*\n#{changelog}",
        success: true,
        default_payloads: []
      )

    else
      UI.message("No 'release' keyword in commit message. Building Debug APK...")

      gradle(
        task: "assemble",
        build_type: "Debug",
        project_dir: "../"
      )

      require 'fileutils'

      app_dir = File.expand_path("..", __dir__)
      apk_path = File.join(app_dir, "build/outputs/apk/debug/app-debug.apk")
      UI.message("Resolved APK path: #{apk_path}")
      destination_dir = "debug_apks"
      timestamp = Time.now.strftime("%Y%m%d-%H%M%S")
      destination_path = File.join(destination_dir, "app-debug.apk")

      FileUtils.mkdir_p(destination_dir)
      FileUtils.cp(apk_path, destination_path)
      UI.success("Debug APK saved to #{destination_path}")

      # GitHub Commit + Push (Make sure GITHUB_TOKEN is set in CI environment)
      sh("git config user.email 'nikhilchoudhary@sutara.org'")
      sh("git config user.name 'CLAuto'")
      sh("git add #{destination_path}")

      # Commit only if file actually added (to avoid failure)
      diff_exit_code = sh("git diff --cached --quiet || echo $?").strip

#       if diff_exit_code != "0"
#         sh("git commit -m \"Add debug APK from CI build at #{timestamp}\"")
#       end
#       remote_url = "https://#{ENV['GITHUB_TOKEN']}@github.com/curiouslearning/CRcontainer.git"
#       sh("git remote set-url origin #{remote_url}")
#       sh("git push origin develop")
    end
  end
end
